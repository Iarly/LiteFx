// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.6.1.0
//      SpecFlow Generator Version:1.6.0.0
//      Runtime Version:4.0.30319.269
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
namespace LiteFx.Specs.EntitySpecs
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.6.1.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class EntitiesEqualityFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "EntitiesEquality.feature"
#line hidden
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Entities Equality", "In order to compare to entities\nAs a developer\nI want that entities follows the r" +
                    "ules of DDD", GenerationTargetLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Comparing two entities of the same type and id")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Entities Equality")]
        public virtual void ComparingTwoEntitiesOfTheSameTypeAndId()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Comparing two entities of the same type and id", ((string[])(null)));
#line 6
this.ScenarioSetup(scenarioInfo);
#line 7
 testRunner.Given("I have a product instance with the id 5");
#line 8
 testRunner.And("I have another product instance with the id 5");
#line 9
 testRunner.When("I compare the two instances");
#line 10
 testRunner.Then("the equality should be true");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Comparing two entities of the same type and diferent id")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Entities Equality")]
        public virtual void ComparingTwoEntitiesOfTheSameTypeAndDiferentId()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Comparing two entities of the same type and diferent id", ((string[])(null)));
#line 12
this.ScenarioSetup(scenarioInfo);
#line 13
 testRunner.Given("I have a product instance with the id 5");
#line 14
 testRunner.And("I have another product instance with the id 10");
#line 15
 testRunner.When("I compare the two instances");
#line 16
 testRunner.Then("the equality should be false");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Comparing two entities of diferent type and same id")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Entities Equality")]
        public virtual void ComparingTwoEntitiesOfDiferentTypeAndSameId()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Comparing two entities of diferent type and same id", ((string[])(null)));
#line 18
this.ScenarioSetup(scenarioInfo);
#line 19
 testRunner.Given("I have a product instance with the id 5");
#line 20
 testRunner.And("I have a category instance with the id 5");
#line 21
 testRunner.When("I compare the two instances");
#line 22
 testRunner.Then("the equality should be false");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Comparing the Hash Code of two entities of the same type and id")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Entities Equality")]
        public virtual void ComparingTheHashCodeOfTwoEntitiesOfTheSameTypeAndId()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Comparing the Hash Code of two entities of the same type and id", ((string[])(null)));
#line 24
this.ScenarioSetup(scenarioInfo);
#line 25
 testRunner.Given("I have a product instance with the id 5");
#line 26
 testRunner.And("I have another product instance with the id 5");
#line 27
 testRunner.When("I compare the Hash Code of this two instances");
#line 28
 testRunner.Then("the equality should be true");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Comparing the Hash Code of two entities of the same type and diferent id")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Entities Equality")]
        public virtual void ComparingTheHashCodeOfTwoEntitiesOfTheSameTypeAndDiferentId()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Comparing the Hash Code of two entities of the same type and diferent id", ((string[])(null)));
#line 30
this.ScenarioSetup(scenarioInfo);
#line 31
 testRunner.Given("I have a product instance with the id 5");
#line 32
 testRunner.And("I have another product instance with the id 10");
#line 33
 testRunner.When("I compare the Hash Code of this two instances");
#line 34
 testRunner.Then("the equality should be false");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Comparing the Hash Code of two two entities of diferent type and same id")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Entities Equality")]
        public virtual void ComparingTheHashCodeOfTwoTwoEntitiesOfDiferentTypeAndSameId()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Comparing the Hash Code of two two entities of diferent type and same id", ((string[])(null)));
#line 36
this.ScenarioSetup(scenarioInfo);
#line 37
 testRunner.Given("I have a product instance with the id 5");
#line 38
 testRunner.And("I have a category instance with the id 5");
#line 39
 testRunner.When("I compare the Hash Code of this two instances");
#line 40
 testRunner.Then("the equality should be false");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Comparing two null entities")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Entities Equality")]
        public virtual void ComparingTwoNullEntities()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Comparing two null entities", ((string[])(null)));
#line 42
this.ScenarioSetup(scenarioInfo);
#line 43
 testRunner.Given("I have a null product");
#line 44
 testRunner.And("I have another null product");
#line 45
 testRunner.When("I compare the two instances");
#line 46
 testRunner.Then("the equality should be true");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Comparing two entities one null and another not")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Entities Equality")]
        public virtual void ComparingTwoEntitiesOneNullAndAnotherNot()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Comparing two entities one null and another not", ((string[])(null)));
#line 48
this.ScenarioSetup(scenarioInfo);
#line 49
 testRunner.Given("I have a null product");
#line 50
 testRunner.And("I have another product instance with the id 5");
#line 51
 testRunner.When("I compare the two instances");
#line 52
 testRunner.Then("the equality should be false");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Comparing two entities one not null and another null")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Entities Equality")]
        public virtual void ComparingTwoEntitiesOneNotNullAndAnotherNull()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Comparing two entities one not null and another null", ((string[])(null)));
#line 54
this.ScenarioSetup(scenarioInfo);
#line 55
 testRunner.Given("I have a product instance with the id 5");
#line 56
 testRunner.And("I have another null product");
#line 57
 testRunner.When("I compare the two instances");
#line 58
 testRunner.Then("the equality should be false");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Comparing the Hash Code of two entities of the same type and id equals 0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Entities Equality")]
        public virtual void ComparingTheHashCodeOfTwoEntitiesOfTheSameTypeAndIdEquals0()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Comparing the Hash Code of two entities of the same type and id equals 0", ((string[])(null)));
#line 60
this.ScenarioSetup(scenarioInfo);
#line 61
 testRunner.Given("I have a product instance with the id 0");
#line 62
 testRunner.And("I have another product instance with the id 0");
#line 63
 testRunner.When("I compare the Hash Code of this two instances");
#line 64
 testRunner.Then("the equality should be false");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Adding two entities of the same type and id into a HashSet")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Entities Equality")]
        public virtual void AddingTwoEntitiesOfTheSameTypeAndIdIntoAHashSet()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Adding two entities of the same type and id into a HashSet", ((string[])(null)));
#line 66
this.ScenarioSetup(scenarioInfo);
#line 67
 testRunner.Given("I have a product instance with the id 5");
#line 68
 testRunner.And("I have another product instance with the id 5");
#line 69
 testRunner.And("a HashSet instance");
#line 70
 testRunner.When("I add the two instances to a HashSet");
#line 71
 testRunner.Then("the HashSet count should be 1");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Adding two entities of the same type and diferent id into a HashSet")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Entities Equality")]
        public virtual void AddingTwoEntitiesOfTheSameTypeAndDiferentIdIntoAHashSet()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Adding two entities of the same type and diferent id into a HashSet", ((string[])(null)));
#line 73
this.ScenarioSetup(scenarioInfo);
#line 74
 testRunner.Given("I have a product instance with the id 5");
#line 75
 testRunner.And("I have another product instance with the id 10");
#line 76
 testRunner.And("a HashSet instance");
#line 77
 testRunner.When("I add the two instances to a HashSet");
#line 78
 testRunner.Then("the HashSet count should be 2");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Adding two entities of diferent types and same id into a HashSet")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Entities Equality")]
        public virtual void AddingTwoEntitiesOfDiferentTypesAndSameIdIntoAHashSet()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Adding two entities of diferent types and same id into a HashSet", ((string[])(null)));
#line 80
this.ScenarioSetup(scenarioInfo);
#line 81
 testRunner.Given("I have a product instance with the id 5");
#line 82
 testRunner.And("I have a category instance with the id 5");
#line 83
 testRunner.And("a HashSet instance");
#line 84
 testRunner.When("I add the two instances to a HashSet");
#line 85
 testRunner.Then("the HashSet count should be 2");
#line hidden
            testRunner.CollectScenarioErrors();
        }
    }
}
#endregion
